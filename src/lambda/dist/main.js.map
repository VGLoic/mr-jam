{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/common/mr-constants.ts","webpack:///./src/common/response.mappers.ts","webpack:///./src/config/config.class.ts","webpack:///./src/config/config.service.ts","webpack:///./src/context/context.ts","webpack:///./src/dataSources/index.ts","webpack:///./src/dataSources/project/index.ts","webpack:///./src/dataSources/project/mappers/gitlab-approval-to-approval.mapper.ts","webpack:///./src/dataSources/project/mappers/gitlab-mr-notes-to-mr-notes.mapper.ts","webpack:///./src/dataSources/project/mappers/gitlab-mr-to-mr.mapper.ts","webpack:///./src/dataSources/project/mappers/gitlab-project-to-project.mapper.ts","webpack:///./src/dataSources/project/mappers/index.ts","webpack:///./src/dataSources/project/project.api.ts","webpack:///./src/dataSources/user/index.ts","webpack:///./src/dataSources/user/mappers/gitlab-user-to-user.mapper.ts","webpack:///./src/dataSources/user/mappers/index.ts","webpack:///./src/dataSources/user/user.api.ts","webpack:///./src/main.ts","webpack:///./src/resolvers.ts","webpack:///./src/schema.ts","webpack:///external \"apollo-datasource-rest\"","webpack:///external \"apollo-server-lambda\"","webpack:///external \"date-fns\""],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","export enum MrStates {\n  Opened = \"opened\",\n  Closed = \"closed\",\n  Merged = \"merged\",\n  Locked = \"locked\",\n  All = \"\",\n}\n","import { isAfter } from \"date-fns\";\nimport { Project, MergeRequest, Note } from \"../dataSources/project\";\nimport { User } from \"../dataSources/user\";\nimport {\n  ProjectConnection,\n  ProjectEdge,\n  MergeRequestConnection,\n  MergeRequestEdge,\n} from \"./response.types\";\n\nconst toProjectConnection = (\n  first: number,\n  projects: Project[]\n): ProjectConnection => {\n  const hasNextPage = projects.length > first;\n\n  const edges: ProjectEdge[] = projects.map(toProjectEdge).slice(0, first);\n\n  const endCursor: number =\n    edges.length > 0 ? edges[edges.length - 1].cursor : null;\n\n  return {\n    edges,\n    pageInfo: {\n      hasNextPage,\n      endCursor,\n    },\n  };\n};\n\nconst toProjectEdge = (project: Project): ProjectEdge => {\n  return {\n    cursor: project.id,\n    node: project,\n  };\n};\n\nconst toMergeRequestConnection = (\n  first: number,\n  mergeRequests: MergeRequest[],\n  toDate: string\n): MergeRequestConnection => {\n  const filteredMergeRequests = toDate\n    ? mergeRequests.filter((mergeRequest): boolean =>\n        isAfter(new Date(toDate), new Date(mergeRequest.createdAt))\n      )\n    : mergeRequests;\n\n  const hasNextPage = filteredMergeRequests.length > first;\n\n  const edges: MergeRequestEdge[] = filteredMergeRequests\n    .map(toMergeRequestEdge)\n    .slice(0, first);\n\n  const endCursor: string =\n    edges.length > 0 ? edges[edges.length - 1].cursor : null;\n\n  return {\n    edges,\n    pageInfo: {\n      hasNextPage,\n      endCursor,\n    },\n  };\n};\n\nconst toMergeRequestEdge = (mergeRequest: MergeRequest): MergeRequestEdge => {\n  return {\n    cursor: mergeRequest.createdAt,\n    node: mergeRequest,\n  };\n};\n\nconst toReviews = (notes: Note[], authorId: number) => {\n  const reviewedByMap: Map<number, User> = notes.reduce(\n    (reviewers: Map<number, User>, note: Note): Map<number, User> => {\n      if (note.author.id !== authorId)\n        reviewers.set(note.author.id, note.author);\n      return reviewers;\n    },\n    new Map()\n  );\n  const reviewedBy: User[] = [...reviewedByMap.values()];\n  return {\n    reviewedBy,\n    notes,\n  };\n};\n\nexport {\n  toProjectConnection,\n  toProjectEdge,\n  toMergeRequestConnection,\n  toMergeRequestEdge,\n  toReviews,\n};\n","interface Config {\n  pageLimit: string;\n}\n\nclass ConfigService {\n  config: Config = {\n    pageLimit: \"11\",\n  };\n\n  get(key: string): string {\n    if (!(key in this.config)) {\n      throw new Error(`Key ${key} does not exist`);\n    }\n    return this.config[key];\n  }\n}\n\nexport { Config, ConfigService };\n","import { Config, ConfigService } from \"./config.class\";\n\nconst configService: ConfigService = new ConfigService();\n\nexport { Config, configService };\n","import { AuthenticationError } from \"apollo-server-lambda\";\nimport { IDataSources } from \"../dataSources\";\n\nexport interface BaseContext {\n  accessToken: string;\n}\n\nexport interface Context extends BaseContext {\n  dataSources: IDataSources;\n}\n\nfunction extractAccessToken(authorizationHeader: string): string {\n  if (typeof authorizationHeader !== \"string\") return \"\";\n  const bearerString: string = authorizationHeader.substring(0, 7);\n  if (bearerString !== \"Bearer \") return \"\";\n  const accessToken: string = authorizationHeader.substring(7);\n  return accessToken;\n}\n\nexport function contextFunction({ event }: any): BaseContext {\n  console.log(\"rest: \", event)\n  const accessToken: string = extractAccessToken(event.headers.authorization);\n\n  if (!accessToken) {\n    throw new AuthenticationError(\"Unauthorized. No access token detected.\");\n  }\n\n  return {\n    accessToken,\n  };\n}\n","import { DataSources } from \"apollo-server-core/dist/graphqlOptions\";\nimport { BaseContext } from \"../context/context\";\nimport { UserAPI } from \"./user\";\nimport { ProjectAPI } from \"./project\";\n\nconst dataSources = (): DataSources<BaseContext> => ({\n  userAPI: new UserAPI(),\n  projectAPI: new ProjectAPI(),\n});\n\nexport interface IDataSources {\n  userAPI: UserAPI;\n  projectAPI: ProjectAPI;\n}\n\nexport { dataSources, UserAPI };\n","export { ProjectAPI } from \"./project.api\";\nexport { Project, MergeRequest, Note } from \"./models\";\n","import { GitlabApprovalState, GitlabApprovalRule } from \"../models\";\nimport { gitlabUserToUser, User } from \"../../user\";\n\nconst gitlabApprovalStateToApprovers = (\n  gitlabApprovalState: GitlabApprovalState\n): User[] => {\n  const approversMap: Map<number, User> = gitlabApprovalState.rules.reduce(\n    (\n      approvers: Map<number, User>,\n      gitlabRule: GitlabApprovalRule\n    ): Map<number, User> => {\n      gitlabRule.approved_by.forEach((gitlabUser): void => {\n        approvers.set(gitlabUser.id, gitlabUserToUser(gitlabUser));\n      });\n      return approvers;\n    },\n    new Map()\n  );\n  return [...approversMap.values()];\n};\n\n// DEPRECATED\n// const gitlabApprovalStateToApprovalState = (\n//   gitlabApprovalState: GitlabApprovalState\n// ): ApprovalState => {\n//   return {\n//     rules: gitlabApprovalState.rules.map(gitlabRuleToRule),\n//   };\n// };\n\n// DEPRECATED\n// const gitlabRuleToRule = (gitlabRule: GitlabApprovalRule): ApprovalRule => {\n//   return {\n//     id: gitlabRule.id,\n//     name: gitlabRule.name,\n//     eligibleApprovers: gitlabRule.eligible_approvers.map(gitlabUserToUser),\n//     approvalsRequired: gitlabRule.approvals_required,\n//     approvedBy: gitlabRule.approved_by.map(gitlabUserToUser),\n//   };\n// };\n\nexport { gitlabApprovalStateToApprovers };\n","import { GitlabNote, Note } from \"../models\";\nimport { gitlabUserToUser } from \"../../user\";\n\nconst gitlabMrNotesToMrNotes = (gitlabMrNotes: GitlabNote[]): Note[] => {\n  const filteredNotes: Note[] = [];\n  gitlabMrNotes.forEach((gitlabNote): void => {\n    if (gitlabNote.type !== \"DiffNote\" || gitlabNote.system) return;\n    filteredNotes.push(gitlabMrNoteToMrNote(gitlabNote));\n  });\n  return filteredNotes;\n};\n\nconst gitlabMrNoteToMrNote = (gitlabNote: GitlabNote): Note => {\n  return {\n    id: gitlabNote.id,\n    type: gitlabNote.type,\n    body: gitlabNote.body,\n    author: gitlabUserToUser(gitlabNote.author),\n    createdAt: gitlabNote.created_at,\n    resolved: gitlabNote.resolved,\n  };\n};\n\nexport { gitlabMrNotesToMrNotes };\n","import { GitlabMergeRequest, MergeRequest } from \"../models\";\nimport { gitlabUserToUser } from \"../../user\";\nconst gitlabMrToMr = (gitlabMr: GitlabMergeRequest): MergeRequest => {\n  return {\n    id: gitlabMr.id,\n    iid: gitlabMr.iid,\n    projectId: gitlabMr.project_id,\n    title: gitlabMr.title,\n    description: gitlabMr.description,\n    state: gitlabMr.state,\n    createdAt: gitlabMr.created_at,\n    updatedAt: gitlabMr.updated_at,\n    mergedBy: gitlabMr.merged_by ? gitlabUserToUser(gitlabMr.merged_by) : null,\n    mergedAt: gitlabMr.merged_at,\n    targetBranch: gitlabMr.target_branch,\n    sourceBranch: gitlabMr.source_branch,\n    assignee: gitlabMr.assignee ? gitlabUserToUser(gitlabMr.assignee) : null,\n    author: gitlabMr.author ? gitlabUserToUser(gitlabMr.author) : null,\n    userNotesCount: gitlabMr.user_notes_count,\n    webUrl: gitlabMr.web_url,\n  };\n};\nexport { gitlabMrToMr };\n","import { GitlabProject, Project } from \"../models\";\n\nconst gitlabProjectToProject = (gitlabProject: GitlabProject): Project => {\n  const { namespace, path_with_namespace, created_at, ...rest } = gitlabProject;\n  const { full_path, ...restNamespace } = namespace;\n  return {\n    ...rest,\n    pathWithNamespace: path_with_namespace,\n    createdAt: created_at,\n    namespace: {\n      ...restNamespace,\n      fullPath: full_path,\n    },\n  };\n};\n\nexport { gitlabProjectToProject };\n","export { gitlabProjectToProject } from \"./gitlab-project-to-project.mapper\";\nexport { gitlabMrToMr } from \"./gitlab-mr-to-mr.mapper\";\nexport { gitlabApprovalStateToApprovers } from \"./gitlab-approval-to-approval.mapper\";\nexport { gitlabMrNotesToMrNotes } from \"./gitlab-mr-notes-to-mr-notes.mapper\";\n","import { RESTDataSource, RequestOptions } from \"apollo-datasource-rest\";\nimport { configService } from \"../../config/config.service\";\nimport {\n  GitlabProject,\n  Project,\n  GitlabMergeRequest,\n  MergeRequest,\n  GitlabApprovalState,\n  Note,\n  GitlabNote,\n} from \"./models\";\nimport {\n  gitlabProjectToProject,\n  gitlabMrToMr,\n  gitlabApprovalStateToApprovers,\n  gitlabMrNotesToMrNotes,\n} from \"./mappers\";\nimport { User, GitlabUser, gitlabUserToUser } from \"../user\";\nimport { MrStates } from \"../../common/mr-constants\";\n\nexport class ProjectAPI extends RESTDataSource {\n  constructor() {\n    super();\n    this.baseURL = `https://gitlab.com/api/v4/projects`;\n  }\n\n  willSendRequest(request: RequestOptions): void {\n    request.headers.set(\"Authorization\", `Bearer ${this.context.accessToken}`);\n    if (!request.params.get(\"per_page\")) {\n      const pageLimit: number = parseInt(configService.get(\"pageLimit\"));\n      request.params.set(\"per_page\", pageLimit.toString());\n    }\n  }\n\n  async getUserProjects(\n    search: string = \"\",\n    after: number = 0\n  ): Promise<Project[]> {\n    try {\n      const gitlabProjects: GitlabProject[] = await this.get(\"/\", {\n        pagination: \"keyset\",\n        id_after: after,\n        order_by: \"id\",\n        sort: \"asc\",\n        membership: true,\n        search,\n        min_access_level: 30,\n      });\n      return gitlabProjects.map(gitlabProjectToProject);\n    } catch (err) {\n      console.log(\"err: \", err);\n    }\n  }\n\n  async getProjectById(projectId: string): Promise<Project> {\n    const gitlabProject: GitlabProject = await this.get(`/${projectId}`);\n    return gitlabProjectToProject(gitlabProject);\n  }\n\n  async getProjectUsers(projectId: string): Promise<User[]> {\n    const gitlabUsers: GitlabUser[] = await this.get(`/${projectId}/users`, {\n      per_page: \"100\",\n    });\n    return gitlabUsers.map(gitlabUserToUser);\n  }\n\n  async getProjectMergeRequests(\n    projectId: string,\n    state: MrStates,\n    after: string\n  ): Promise<MergeRequest[]> {\n    const params: Record<string, string> = {\n      order_by: \"created_at\",\n      sort: \"asc\",\n    };\n    if (state) params.state = state;\n    if (after) params.created_after = after;\n    const gitlabMergeRequests: GitlabMergeRequest[] = await this.get(\n      `/${projectId}/merge_requests`,\n      params\n    );\n    return gitlabMergeRequests.map(gitlabMrToMr);\n  }\n\n  async getMergeRequestApprovers(\n    projectId: string,\n    mergeRequestIid: string\n  ): Promise<User[]> {\n    const gitlabApprovalState: GitlabApprovalState = await this.get(\n      `/${projectId}/merge_requests/${mergeRequestIid}/approval_state`\n    );\n    return gitlabApprovalStateToApprovers(gitlabApprovalState);\n  }\n\n  async getMergeRequestNotes(\n    projectId: string,\n    mergeRequestIid: string\n  ): Promise<Note[]> {\n    const gitlabNotes: GitlabNote[] = await this.get(\n      `/${projectId}/merge_requests/${mergeRequestIid}/notes`,\n      {\n        per_page: \"100\",\n      }\n    );\n    return gitlabMrNotesToMrNotes(gitlabNotes);\n  }\n}\n","export { UserAPI } from \"./user.api\";\nexport { User, GitlabUser } from \"./models\";\nexport { gitlabUserToUser } from \"./mappers\";\n","import { GitlabUser, User } from \"../models\";\n\nconst gitlabUserToUser = (gitlabUser: GitlabUser): User => {\n  const { avatar_url, ...rest } = gitlabUser;\n  return {\n    ...rest,\n    avatarUrl: avatar_url,\n  };\n};\n\nexport { gitlabUserToUser };\n","export { gitlabUserToUser } from \"./gitlab-user-to-user.mapper\";\n","import { RESTDataSource, RequestOptions } from \"apollo-datasource-rest\";\nimport { configService } from \"../../config/config.service\";\nimport { GitlabUser, User } from \"./models\";\nimport { gitlabUserToUser } from \"./mappers\";\n\nexport class UserAPI extends RESTDataSource {\n  constructor() {\n    super();\n    this.baseURL = `https://gitlab.com/api/v4/user`;\n  }\n\n  willSendRequest(request: RequestOptions): void {\n    request.headers.set(\"Authorization\", `Bearer ${this.context.accessToken}`);\n    if (!request.params.get(\"per_page\")) {\n      const pageLimit: number = parseInt(configService.get(\"pageLimit\"));\n      request.params.set(\"per_page\", pageLimit.toString());\n    }\n  }\n\n  async getCurrentUser(): Promise<User> {\n    const gitlabUser: GitlabUser = await this.get(\"/\");\n    return gitlabUserToUser(gitlabUser);\n  }\n}\n","import { ApolloServer } from \"apollo-server-lambda\";\nimport { resolvers } from \"./resolvers\";\nimport { typeDefs } from \"./schema\";\nimport { dataSources } from \"./dataSources\";\nimport { contextFunction } from \"./context/context\";\n\nconst server: ApolloServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  dataSources,\n  context: contextFunction,\n});\n\nexports.handler = server.createHandler();\n","import { isAfter } from \"date-fns\";\nimport { configService } from \"./config/config.service\";\nimport {\n  toProjectConnection,\n  toMergeRequestConnection,\n  toReviews,\n} from \"./common/response.mappers\";\nimport { Context } from \"./context/context\";\nimport { User } from \"./dataSources/user\";\nimport { Project, MergeRequest, Note } from \"./dataSources/project\";\nimport {\n  ProjectConnection,\n  MergeRequestConnection,\n  Reviews,\n} from \"./common/response.types\";\nimport { MrStates } from \"./common/mr-constants\";\nimport {\n  ProjectsInputs,\n  MergeRequestsInputs,\n  ProjectInputs,\n} from \"./common/request.types\";\n\nconst resolvers = {\n  MrStates: {\n    OPENED: MrStates.Opened,\n    CLOSED: MrStates.Closed,\n    MERGED: MrStates.Merged,\n    LOCKED: MrStates.Locked,\n    ALL: MrStates.All,\n  },\n  Query: {\n    currentUser: async (_, __, { dataSources }: Context): Promise<User> => {\n      return dataSources.userAPI.getCurrentUser();\n    },\n    projects: async (\n      _,\n      { search, first, after }: ProjectsInputs,\n      { dataSources }: Context\n    ): Promise<ProjectConnection> => {\n      if (first >= parseInt(configService.get(\"pageLimit\"))) {\n        throw new Error(\"Ooops, that much quantity is not supported yet :(\");\n      }\n      const projects: Project[] = await dataSources.projectAPI.getUserProjects(\n        search,\n        after\n      );\n      return toProjectConnection(first, projects);\n    },\n    project: async (\n      _,\n      { projectId }: ProjectInputs,\n      { dataSources }: Context\n    ): Promise<Project> => {\n      return dataSources.projectAPI.getProjectById(projectId);\n    },\n  },\n  Project: {\n    users: async (\n      { id: projectId }: Project,\n      __,\n      { dataSources }: Context\n    ): Promise<User[]> => {\n      return dataSources.projectAPI.getProjectUsers(projectId.toString());\n    },\n    mergeRequests: async (\n      { id: projectId }: Project,\n      { first, fromDate, toDate, after, mrState }: MergeRequestsInputs,\n      { dataSources }: Context\n    ): Promise<MergeRequestConnection> => {\n      if (first >= parseInt(configService.get(\"pageLimit\"))) {\n        throw new Error(\"Ooops, that much quantity is not supported yet :(\");\n      }\n\n      let effectiveAfter: string = fromDate;\n\n      if (after) {\n        const afterDateFormat = new Date(after);\n        const fromDateFormat = new Date(fromDate);\n\n        if (toDate) {\n          const toDateFormat = new Date(toDate);\n          if (isAfter(afterDateFormat, toDateFormat)) {\n            throw new Error(\"cursor cannot be after the toDate\");\n          }\n        }\n\n        if (isAfter(fromDateFormat, afterDateFormat)) {\n          throw new Error(\"fromDate cannot be after the cursor\");\n        }\n        effectiveAfter = after;\n      }\n\n      const mergeRequests: MergeRequest[] = await dataSources.projectAPI.getProjectMergeRequests(\n        projectId.toString(),\n        mrState,\n        effectiveAfter\n      );\n      return toMergeRequestConnection(first, mergeRequests, toDate);\n    },\n  },\n  MergeRequest: {\n    approvedBy: async (\n      { projectId, iid }: MergeRequest,\n      __,\n      { dataSources }: Context\n    ): Promise<User[]> => {\n      return dataSources.projectAPI.getMergeRequestApprovers(\n        projectId.toString(),\n        iid.toString()\n      );\n    },\n    reviews: async (\n      { projectId, iid, author }: MergeRequest,\n      __,\n      { dataSources }: Context\n    ): Promise<Reviews> => {\n      const notes: Note[] = await dataSources.projectAPI.getMergeRequestNotes(\n        projectId.toString(),\n        iid.toString()\n      );\n      return toReviews(notes, author.id);\n    },\n  },\n  User: {\n    projects: async (_, __, { dataSources }: Context): Promise<Project[]> => {\n      return dataSources.projectAPI.getUserProjects();\n    },\n  },\n};\n\nexport { resolvers };\n","import { gql } from \"apollo-server-lambda\";\nimport { DocumentNode } from \"graphql\";\n\nconst typeDefs: DocumentNode = gql`\n  enum MrStates {\n    OPENED\n    CLOSED\n    MERGED\n    LOCKED\n    ALL\n  }\n\n  type Namespace {\n    id: ID!\n    name: String!\n    fullPath: String!\n  }\n\n  type ProjectConnection {\n    edges: [ProjectEdge]\n    pageInfo: ProjectPageInfo!\n  }\n\n  type ProjectPageInfo {\n    \"\"\"\n    True if there are still projects to fetch\n    \"\"\"\n    hasNextPage: Boolean!\n    \"\"\"\n    Cursor (ID) of the last edge, null if no result\n    \"\"\"\n    endCursor: Int\n  }\n\n  type ProjectEdge {\n    \"\"\"\n    Cursor for project is the ID since the pagination by created_at is not supported by gitlab\n    \"\"\"\n    cursor: Int!\n    \"\"\"\n    Project node\n    \"\"\"\n    node: Project!\n  }\n\n  type Project {\n    \"\"\"\n    Gitlab ID of the project\n    \"\"\"\n    id: ID!\n    \"\"\"\n    Name of the project\n    \"\"\"\n    name: String!\n    \"\"\"\n    Description of the project\n    \"\"\"\n    description: String\n    \"\"\"\n    Path of the project with the namespace\n    \"\"\"\n    pathWithNamespace: String!\n    \"\"\"\n    Namespace of the project\n    \"\"\"\n    namespace: Namespace!\n    \"\"\"\n    Users of the project, only developers and higher\n    \"\"\"\n    users: [User]\n    \"\"\"\n    Merge requests of the projects, sorted by ascending createdAt\n    \"\"\"\n    mergeRequests(\n      \"\"\"\n      Pagination paramater: how many results in the response, maximum is 10\n      \"\"\"\n      first: Int = 5\n      \"\"\"\n      Search for merge request created after this date\n      \"\"\"\n      fromDate: String = \"2019-01-01\"\n      \"\"\"\n      Search for merge request created before this date\n      \"\"\"\n      toDate: String\n      \"\"\"\n      Pagination parameter: cursor (created_at) used for searching new results\n      \"\"\"\n      after: String\n      \"\"\"\n      State of the merge requests\n      \"\"\"\n      mrState: MrStates = ALL\n    ): MergeRequestConnection\n  }\n\n  type MergeRequestConnection {\n    \"\"\"\n    Edges, each edge contain the pagination cursor and the node (data)\n    \"\"\"\n    edges: [MergeRequestEdge]\n    \"\"\"\n    Page information related to the pagination\n    \"\"\"\n    pageInfo: MergeRequestPageInfo!\n  }\n\n  type MergeRequestPageInfo {\n    \"\"\"\n    True if there are still merge requests to fetch\n    \"\"\"\n    hasNextPage: Boolean!\n    \"\"\"\n    Cursor (created_at) of the last edge, null if no result\n    \"\"\"\n    endCursor: String\n  }\n\n  type MergeRequestEdge {\n    \"\"\"\n    Cursor for merge request is the created_at since the pagination by ID is not supported by gitlab\n    \"\"\"\n    cursor: String!\n    \"\"\"\n    Merge request node\n    \"\"\"\n    node: MergeRequest!\n  }\n\n  type MergeRequest {\n    \"\"\"\n    Gitlab ID of the merge request\n    \"\"\"\n    id: ID!\n    \"\"\"\n    Gitlab iid of the merge request\n    \"\"\"\n    iid: Int!\n    \"\"\"\n    Gitlab ID of the project to which the merge request belongs\n    \"\"\"\n    projectId: Int!\n    \"\"\"\n    Title of the merge request\n    \"\"\"\n    title: String!\n    \"\"\"\n    Description of the merge request\n    \"\"\"\n    description: String!\n    \"\"\"\n    State of the merge request\n    \"\"\"\n    state: String!\n    \"\"\"\n    Date of the creation of the merge request\n    \"\"\"\n    createdAt: String!\n    \"\"\"\n    Date of the last update of the merge request\n    \"\"\"\n    updatedAt: String!\n    \"\"\"\n    User who has merged the merge request\n    \"\"\"\n    mergedBy: User\n    \"\"\"\n    Date of the merge\n    \"\"\"\n    mergedAt: String\n    \"\"\"\n    Target branch of the merge request\n    \"\"\"\n    targetBranch: String\n    \"\"\"\n    Source branch of the merge request\n    \"\"\"\n    sourceBranch: String\n    \"\"\"\n    Assignee of the merge request\n    \"\"\"\n    assignee: User\n    \"\"\"\n    Author of the merge request\n    \"\"\"\n    author: User!\n    \"\"\"\n    Total number of notes in the merge request\n    \"\"\"\n    userNotesCount: Int!\n    \"\"\"\n    URL of the merge request\n    \"\"\"\n    webUrl: String!\n    \"\"\"\n    List of users who have approved the merge request\n    \"\"\"\n    approvedBy: [User]\n    \"\"\"\n    Reviews state of the merge request\n    \"\"\"\n    reviews: Reviews\n  }\n\n  type Reviews {\n    \"\"\"\n    List of notes in the merge request\n    \"\"\"\n    notes: [Note]\n    \"\"\"\n    List of users who have reviewed the merge request\n    \"\"\"\n    reviewedBy: [User]\n  }\n\n  type Note {\n    \"\"\"\n    Gitlab ID of the note\n    \"\"\"\n    id: ID!\n    \"\"\"\n    Type of the note\n    \"\"\"\n    type: String!\n    \"\"\"\n    Body of the note\n    \"\"\"\n    body: String!\n    \"\"\"\n    Author of the note\n    \"\"\"\n    author: User!\n    \"\"\"\n    Date of creation of the note\n    \"\"\"\n    createdAt: String!\n    \"\"\"\n    True if the note is resolved\n    \"\"\"\n    resolved: Boolean!\n  }\n\n  \"\"\"\n  DEPRECATED\n  \"\"\"\n  type ApprovalState {\n    rules: [ApprovalRule]\n  }\n\n  \"\"\"\n  DEPRECATED\n  \"\"\"\n  type ApprovalRule {\n    id: ID!\n    name: String!\n    eligibleApprovers: [User]\n    approvalsRequired: Int\n    approvedBy: [User]\n  }\n\n  type User {\n    \"\"\"\n    Gitlab ID of the user\n    \"\"\"\n    id: ID!\n    \"\"\"\n    Gitlab name of the user\n    \"\"\"\n    name: String!\n    \"\"\"\n    Gitlab username of the user\n    \"\"\"\n    username: String!\n    \"\"\"\n    Gitlab avatar URL of the user\n    \"\"\"\n    avatarUrl: String!\n    \"\"\"\n    Gitlab email of the user\n    \"\"\"\n    email: String!\n    \"\"\"\n    List of projects of the user\n    \"\"\"\n    projects: [Project]\n  }\n\n  type Query {\n    \"\"\"\n    Allow to query the current user given the access token\n    \"\"\"\n    currentUser: User\n    \"\"\"\n    Allow to query projects given a search parameter\n    \"\"\"\n    projects(\n      \"\"\"\n      Search parameter of the project\n      \"\"\"\n      search: String\n      \"\"\"\n      Pagination paramater: how many results in the response, maximum is 10\n      \"\"\"\n      first: Int = 5\n      \"\"\"\n      Pagination parameter: cursor (id) used for searching new results\n      \"\"\"\n      after: Int = 0\n    ): ProjectConnection\n    \"\"\"\n    Allow to query one project by its ID\n    \"\"\"\n    project(\n      \"\"\"\n      ID of the project\n      \"\"\"\n      projectId: String!\n    ): Project\n  }\n`;\n\nexport { typeDefs };\n","module.exports = require(\"apollo-datasource-rest\");","module.exports = require(\"apollo-server-lambda\");","module.exports = require(\"date-fns\");"],"sourceRoot":""}